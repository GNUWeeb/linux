#ifndef _ASM_X86_ASM_H
#define _ASM_X86_ASM_H

#ifdef __ASSEMBLY__
# define __ASM_FORM(x)	x
# define __ASM_FORM_COMMA(x) x,
#else
# define __ASM_FORM(x)	" " #x " "
# define __ASM_FORM_COMMA(x) " " #x ","
#endif

#ifdef CONFIG_X86_32
# define __ASM_SEL(a,b) __ASM_FORM(a)
#else
# define __ASM_SEL(a,b) __ASM_FORM(b)
#endif

#define __ASM_SIZE(inst, ...)	__ASM_SEL(inst##l##__VA_ARGS__, \
					  inst##q##__VA_ARGS__)
#define __ASM_REG(reg)		__ASM_SEL(e##reg, r##reg)

#define _ASM_PTR	__ASM_SEL(.long, .quad)
#define _ASM_ALIGN	__ASM_SEL(.balign 4, .balign 8)

#define _ASM_MOV	__ASM_SIZE(mov)
#define _ASM_INC	__ASM_SIZE(inc)
#define _ASM_DEC	__ASM_SIZE(dec)
#define _ASM_ADD	__ASM_SIZE(add)
#define _ASM_SUB	__ASM_SIZE(sub)
#define _ASM_XADD	__ASM_SIZE(xadd)

#define _ASM_AX		__ASM_REG(ax)
#define _ASM_BX		__ASM_REG(bx)
#define _ASM_CX		__ASM_REG(cx)
#define _ASM_DX		__ASM_REG(dx)
#define _ASM_SP		__ASM_REG(sp)
#define _ASM_BP		__ASM_REG(bp)
#define _ASM_SI		__ASM_REG(si)
#define _ASM_DI		__ASM_REG(di)

/* Exception table entry */

/*
 * An exception table entry is 64 bits.  The first 32 bits are the offset
 * from that entry to the potentially faulting instruction.  sortextable
 * relies on that exact encoding.  The second 32 bits encode the fault
 * handler address.
 *
 * We want to stick two extra bits of handler class into the fault handler
 * address.  All of these are generated by relocations, so we can only
 * rely on addition.  We therefore emit:
 *
 * (target - here) + (class) + 0x20000000
 *
 * This has the property that the two high bits are the class and the
 * rest is easy to decode.
 */

/* There are two bits of extable entry class, added to a signed offset. */
#define _EXTABLE_CLASS_DEFAULT	0		/* standard uaccess fixup */
#define _EXTABLE_CLASS_EX	0x80000000	/* uaccess + set uaccess_err */

/*
 * The biases are the class constants + 0x20000000, as signed integers.
 * This can't use ordinary arithmetic -- the assembler isn't that smart.
 */
#define _EXTABLE_BIAS_DEFAULT	0x20000000
#define _EXTABLE_BIAS_EX	0x20000000 - 0x80000000

#ifdef __ASSEMBLY__
# define _EXPAND_EXTABLE_BIAS(x) x
# define _ASM_EXTABLE_CLASS(from,to,bias)				\
	.pushsection "__ex_table","a" ;					\
	.balign 8 ;							\
	.long (from) - . ;						\
	.long (to) - . + _EXPAND_EXTABLE_BIAS(bias) ;			\
	.popsection
#else
# define _EXPAND_EXTABLE_BIAS(x) #x
# define _ASM_EXTABLE_CLASS(from,to,bias)				\
	" .pushsection \"__ex_table\",\"a\"\n"				\
	" .balign 8\n"							\
	" .long (" #from ") - .\n"					\
	" .long (" #to ") - . + " _EXPAND_EXTABLE_BIAS(bias) "\n"	\
	" .popsection\n"
#endif

#define _ASM_EXTABLE(from,to)						\
	_ASM_EXTABLE_CLASS(from, to, _EXTABLE_BIAS_DEFAULT)

#define _ASM_EXTABLE_EX(from,to)					\
	_ASM_EXTABLE_CLASS(from, to, _EXTABLE_BIAS_EX)

#endif /* _ASM_X86_ASM_H */
